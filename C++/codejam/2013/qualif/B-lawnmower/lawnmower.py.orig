# $Id$
# Codejam qualification round 2013:
# check if a lawn can be cut to the pattern described by a matrix
# Debug with " pdb3.4 lawnmower.py "

import sys

def solve(t, n, m, checkCol=False):
    ok = True

    for i in range(n):
        h = t[i][0]  # min height to cut the lawn
        for j in range(m):
            sys.stdout.write(t[i][j] + " ")
            if int(t[i][j]) > int(h):
                ok = False
                print("t[i][j] > ", h, " true @row: ", t[i])
                return "No"
        print()

    if ok == True:
        if not checkCol:
            # Transpose to check columns, as the matrix is not square but rectangle
            # thus can't use t[j][i]
            print("--- Cols:")
            t2 = list(zip(*t))
            if t2 == t:
                pass
            else:
                solve(t2, m, n, checkCol=True)
        return "Yes"

    else:
        return "No"


####### main
try:
    file = "B-small-practice.in"
    inp = open(file)
    outp = open("{0}{1}".format(file, ".out2"), mode='w')

    nCases = int(inp.readline().strip())
    print(nCases, " test cases")

    for k in range(1, nCases + 1):
        n, m = inp.readline().strip().split(sep=' ')
        print("n, m:", n, m)
        n = int(n)
        m = int(m)

        t = []  # [[0] * n for j in range(m)]
        # Read the rows
        for i in range(n):
            t.append(inp.readline().strip().split(sep=' '))

        line = "Case #{}{}{}\n".format(k, ': ', solve(t, n, m))
        sys.stdout.write(line)
        outp.write(line)

    inp.close()
    outp.close()

except Exception as ex:
    print("Error:", sys.exc_info()[0], ex)
    #raise
