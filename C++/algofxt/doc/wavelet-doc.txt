// -*- C++ -*-
// automatically generated by autodoc

// ========== HEADER FILE src/wavelet/daubechies.h: ==========


// wavelet/daubechies.cc:
// Array pointing to coefficients for Daubechies wavelets:
extern const double * const daub_filter_tab[];
extern const ulong daub_filter_tab_len;

// ========== HEADER FILE src/wavelet/harmonic-wavelet.h: ==========

// ----- SRCFILE=src/wavelet/harmonic-wavelet.cc: -----
void harmonic_wavelet(double *fr, double *fi, ulong ldn);
// Harmonic wavelet transform.
// Cf. David E. Newland: "Harmonic Wavelet Analysis",
//   Proceedings R. Soc. Lond. A,: Mathematical and Physical Sciences,
//   vol.443, no.1917, pp.203-225, (1993).

void inverse_harmonic_wavelet(double *fr, double *fi, ulong ldn);
// Inverse of harmonic_wavelet()

// ========== HEADER FILE src/wavelet/wavelet.h: ==========

// ---------- WAVELET TRANSFORM ----------

// wavelet/waveletfilter.h:
class wavelet_filter;

// ----- SRCFILE=src/wavelet/wavelet.cc: -----
void wavelet(double *f, ulong ldn, const wavelet_filter &wf, ulong minm/*=2*/);
// Wavelet transform

void wavelet_step(double *f, ulong n, const wavelet_filter &wf, double *t);

// ----- SRCFILE=src/wavelet/invwavelet.cc: -----
void inverse_wavelet(double *f, ulong ldn, const wavelet_filter &wf, ulong minm/*=2*/);
// Inverse wavelet transform

void inverse_wavelet_step(double *f, ulong n, const wavelet_filter &wf, double *t);

// ========== HEADER FILE src/wavelet/waveletfilter.h: ==========

class wavelet_filter;

