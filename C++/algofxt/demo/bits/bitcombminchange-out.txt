// output of ./demo/bits/bitcombminchange-demo.cc:
// Description:
//% Generating all combinations of bits (as binary words) in minimal-change order.

arg 1: 7 == n  [Minchange combinations (n over k):  n  (n>0)]  default=7
arg 2: 4 == k  [  (0<k<=n)]  default=4
    ...1.1.    ...1...    ...1111
    ..1..1.    .....1.    ..11.11    ..+1-11
    ..1.1..    .....1.    ..1111.    ..11+1-
    ..1.11.    ....1..    ..111.1    ..111-+
    ..11.1.    ...1...    ..1.111    ..1-1+1
    .1...1.    .....1.    .11..11    .+1.-11
    .1..1..    .....1.    .11.11.    .11.+1-
    .1..11.    .....1.    .11.1.1    .11.1-+
    .1.1...    ....1..    .1111..    .11+1.-
    .1.11..    .....1.    .111.1.    .111-+.
    .1.111.    ....1..    .111..1    .111.-+
    .11..1.    .....1.    .1.1.11    .1-1.+1
    .11.1..    .....1.    .1.111.    .1.1+1-
    .11.11.    ....1..    .1.11.1    .1.11-+
    .111.1.    ...1...    .1..111    .1.-1+1
    1....1.    .....1.    11...11    +1..-11
    1...1..    .....1.    11..11.    11..+1-
    1...11.    .....1.    11..1.1    11..1-+
    1..1...    ....1..    11.11..    11.+1.-
    1..11..    .....1.    11.1.1.    11.1-+.
    1..111.    .....1.    11.1..1    11.1.-+
    1.1....    ...1...    1111...    11+1..-
    1.11...    ....1..    111.1..    111-+..
    1.111..    .....1.    111..1.    111.-+.
    1.1111.    ....1..    111...1    111..-+
    11...1.    .....1.    1.1..11    1-1..+1
    11..1..    .....1.    1.1.11.    1.1.+1-
    11..11.    .....1.    1.1.1.1    1.1.1-+
    11.1...    ....1..    1.111..    1.1+1.-
    11.11..    .....1.    1.11.1.    1.11-+.
    11.111.    ....1..    1.11..1    1.11.-+
    111..1.    .....1.    1..1.11    1.-1.+1
    111.1..    .....1.    1..111.    1..1+1-
    111.11.    ....1..    1..11.1    1..11-+
    1111.1.    ...1...    1...111    1..-1+1
 ct=35
