// output of ./demo/bits/bitcombcolex-demo.cc:
// Description:
//% Generating combinations of bits (as binary words) in co-lexicographic order.

arg 1: 7 == n  [Colex combinations (n over k):  n  (n>0)]  default=7
arg 2: 4 == k  [  (0<=k<=n)]  default=4
    ...1111 = { 0, 1, 2, 3 }
    ..1.111 = { 0, 1, 2, 4 }
    ..11.11 = { 0, 1, 3, 4 }
    ..111.1 = { 0, 2, 3, 4 }
    ..1111. = { 1, 2, 3, 4 }
    .1..111 = { 0, 1, 2, 5 }
    .1.1.11 = { 0, 1, 3, 5 }
    .1.11.1 = { 0, 2, 3, 5 }
    .1.111. = { 1, 2, 3, 5 }
    .11..11 = { 0, 1, 4, 5 }
    .11.1.1 = { 0, 2, 4, 5 }
    .11.11. = { 1, 2, 4, 5 }
    .111..1 = { 0, 3, 4, 5 }
    .111.1. = { 1, 3, 4, 5 }
    .1111.. = { 2, 3, 4, 5 }
    1...111 = { 0, 1, 2, 6 }
    1..1.11 = { 0, 1, 3, 6 }
    1..11.1 = { 0, 2, 3, 6 }
    1..111. = { 1, 2, 3, 6 }
    1.1..11 = { 0, 1, 4, 6 }
    1.1.1.1 = { 0, 2, 4, 6 }
    1.1.11. = { 1, 2, 4, 6 }
    1.11..1 = { 0, 3, 4, 6 }
    1.11.1. = { 1, 3, 4, 6 }
    1.111.. = { 2, 3, 4, 6 }
    11...11 = { 0, 1, 5, 6 }
    11..1.1 = { 0, 2, 5, 6 }
    11..11. = { 1, 2, 5, 6 }
    11.1..1 = { 0, 3, 5, 6 }
    11.1.1. = { 1, 3, 5, 6 }
    11.11.. = { 2, 3, 5, 6 }
    111...1 = { 0, 4, 5, 6 }
    111..1. = { 1, 4, 5, 6 }
    111.1.. = { 2, 4, 5, 6 }
    1111... = { 3, 4, 5, 6 }
 ct=35
