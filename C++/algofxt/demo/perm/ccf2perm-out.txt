// output of ./demo/perm/ccf2perm-demo.cc:
// Description:
//% Convert permutations to and from canonical cycle form (CCF).

arg 1: 4 == n  [Permutations of n elements.]  default=4
   0:    [ . 1 2 3 ]    (0) (1) (2) (3)     [ . 1 2 3 ]    (0) (1) (2) (3) 
   1:    [ . 1 3 2 ]    (0) (1) (3, 2)      [ . 1 3 2 ]    (0) (1) (3, 2)  
   2:    [ . 2 1 3 ]    (0) (2, 1) (3)      [ . 2 1 3 ]    (0) (2, 1) (3)  
   3:    [ . 2 3 1 ]    (0) (2, 3, 1)       [ . 2 3 1 ]    (0) (2, 3, 1)   
   4:    [ . 3 1 2 ]    (0) (3, 1) (2)      [ . 3 2 1 ]    (0) (3, 2, 1)   
   5:    [ . 3 2 1 ]    (0) (3, 2, 1)       [ . 3 1 2 ]    (0) (3, 1) (2)  
   6:    [ 1 . 2 3 ]    (1, 0) (2) (3)      [ 1 . 2 3 ]    (1, 0) (2) (3)  
   7:    [ 1 . 3 2 ]    (1, 0) (3, 2)       [ 1 . 3 2 ]    (1, 0) (3, 2)   
   8:    [ 1 2 . 3 ]    (1, 2, 0) (3)       [ 1 2 . 3 ]    (1, 2, 0) (3)   
   9:    [ 1 2 3 . ]    (1, 2, 3, 0)        [ 1 2 3 . ]    (1, 2, 3, 0)    
  10:    [ 1 3 . 2 ]    (1, 3, 0) (2)       [ 1 3 2 . ]    (1, 3, 2, 0)    
  11:    [ 1 3 2 . ]    (1, 3, 2, 0)        [ 1 3 . 2 ]    (1, 3, 0) (2)   
  12:    [ 2 . 1 3 ]    (2, 0) (1) (3)      [ 2 1 . 3 ]    (2, 1, 0) (3)   
  13:    [ 2 . 3 1 ]    (2, 0) (3, 1)       [ 2 3 . 1 ]    (2, 3, 1, 0)    
  14:    [ 2 1 . 3 ]    (2, 1, 0) (3)       [ 2 . 1 3 ]    (2, 0) (1) (3)  
  15:    [ 2 1 3 . ]    (2, 1, 3, 0)        [ 2 3 1 . ]    (2, 3, 0) (1)   
  16:    [ 2 3 . 1 ]    (2, 3, 0) (1)       [ 2 1 3 . ]    (2, 0) (3, 1)   
  17:    [ 2 3 1 . ]    (2, 3, 1, 0)        [ 2 . 3 1 ]    (2, 1, 3, 0)    
  18:    [ 3 . 1 2 ]    (3, 0) (1) (2)      [ 3 1 2 . ]    (3, 2, 1, 0)    
  19:    [ 3 . 2 1 ]    (3, 0) (2, 1)       [ 3 2 1 . ]    (3, 1, 0) (2)   
  20:    [ 3 1 . 2 ]    (3, 1, 0) (2)       [ 3 . 2 1 ]    (3, 2, 0) (1)   
  21:    [ 3 1 2 . ]    (3, 1, 2, 0)        [ 3 2 . 1 ]    (3, 0) (1) (2)  
  22:    [ 3 2 . 1 ]    (3, 2, 0) (1)       [ 3 1 . 2 ]    (3, 1, 2, 0)    
  23:    [ 3 2 1 . ]    (3, 2, 1, 0)        [ 3 . 1 2 ]    (3, 0) (2, 1)   
