// output of ./demo/perm/permrand-cyclic-demo.cc:
// Description:
//% Random cyclic permutations.

arg 1: 7 == n  [Permutations of n>0 elements]  default=7
arg 2: 20 == c  [Number of permutations]  default=20
   0:    [ 2 6 1 5 3 0 4 ]    (0, 2, 1, 6, 4, 3, 5)
   1:    [ 2 6 3 1 5 0 4 ]    (0, 2, 3, 1, 6, 4, 5)
   2:    [ 1 6 3 4 5 0 2 ]    (0, 1, 6, 2, 3, 4, 5)
   3:    [ 1 6 5 2 0 4 3 ]    (0, 1, 6, 3, 2, 5, 4)
   4:    [ 1 5 0 4 6 3 2 ]    (0, 1, 5, 3, 4, 6, 2)
   5:    [ 6 3 4 0 1 2 5 ]    (0, 6, 5, 2, 4, 1, 3)
   6:    [ 6 0 1 2 5 3 4 ]    (0, 6, 4, 5, 3, 2, 1)
   7:    [ 2 6 3 4 1 0 5 ]    (0, 2, 3, 4, 1, 6, 5)
   8:    [ 1 3 5 6 2 0 4 ]    (0, 1, 3, 6, 4, 2, 5)
   9:    [ 2 5 4 6 1 3 0 ]    (0, 2, 4, 1, 5, 3, 6)
  10:    [ 2 4 3 1 5 6 0 ]    (0, 2, 3, 1, 4, 5, 6)
  11:    [ 1 5 6 2 0 3 4 ]    (0, 1, 5, 3, 2, 6, 4)
  12:    [ 3 0 6 4 2 1 5 ]    (0, 3, 4, 2, 6, 5, 1)
  13:    [ 1 3 6 2 5 0 4 ]    (0, 1, 3, 2, 6, 4, 5)
  14:    [ 5 2 6 0 3 1 4 ]    (0, 5, 1, 2, 6, 4, 3)
  15:    [ 4 6 0 1 5 3 2 ]    (0, 4, 5, 3, 1, 6, 2)
  16:    [ 5 6 3 1 0 2 4 ]    (0, 5, 2, 3, 1, 6, 4)
  17:    [ 2 5 3 1 0 6 4 ]    (0, 2, 3, 1, 5, 6, 4)
  18:    [ 1 5 4 0 6 2 3 ]    (0, 1, 5, 2, 4, 6, 3)
  19:    [ 4 6 3 5 2 1 0 ]    (0, 4, 2, 3, 5, 1, 6)
