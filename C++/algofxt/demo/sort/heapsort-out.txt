// output of ./demo/sort/heapsort-demo.cc:
// Description:
//% Demo of the heap sort algorithm.

arg 1: 25 == n  [Number of elements]  default=25

random values:
   0:  0.84019 
   1:  0.39438 
   2:  0.7831  
   3:  0.79844 
   4:  0.91165 
   5:  0.19755 
   6:  0.33522 
   7:  0.76823 
   8:  0.27777 
   9:  0.55397 
  10:  0.4774  
  11:  0.62887 
  12:  0.36478 
  13:  0.5134  
  14:  0.95223 
  15:  0.9162  
  16:  0.63571 
  17:  0.7173  
  18:  0.1416  
  19:  0.60697 
  20:  0.016301
  21:  0.24289 
  22:  0.13723 
  23:  0.80418 
  24:  0.15668 


heapified values:
   0:  0.95223 
   1:  0.9162  
   2:  0.84019 
   3:  0.79844 
   4:  0.91165 
   5:  0.80418 
   6:  0.7831  
   7:  0.76823 
   8:  0.7173  
   9:  0.60697 
  10:  0.4774  
  11:  0.62887 
  12:  0.36478 
  13:  0.5134  
  14:  0.33522 
  15:  0.39438 
  16:  0.63571 
  17:  0.27777 
  18:  0.1416  
  19:  0.55397 
  20:  0.016301
  21:  0.24289 
  22:  0.13723 
  23:  0.19755 
  24:  0.15668 


sorted values:
   0:  0.016301
   1:  0.13723 
   2:  0.1416  
   3:  0.15668 
   4:  0.19755 
   5:  0.24289 
   6:  0.27777 
   7:  0.33522 
   8:  0.36478 
   9:  0.39438 
  10:  0.4774  
  11:  0.5134  
  12:  0.55397 
  13:  0.60697 
  14:  0.62887 
  15:  0.63571 
  16:  0.7173  
  17:  0.76823 
  18:  0.7831  
  19:  0.79844 
  20:  0.80418 
  21:  0.84019 
  22:  0.91165 
  23:  0.9162  
  24:  0.95223 

searching for v=0.36478
found at index 8
