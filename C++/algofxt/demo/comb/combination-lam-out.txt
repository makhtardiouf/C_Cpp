// output of ./demo/comb/combination-lam-demo.cc:
// Description:
//% Minimal-change order for combinations with k>=2 elements.
//% Good performance for small k.

arg 1: 7 == n  [Combinations (n choose k)]  default=7
arg 2: 3 == k  []  default=3
  1:      { 1, 2, 7 }    11....1
  2:      { 2, 3, 7 }    .11...1
  3:      { 1, 3, 7 }    1.1...1
  4:      { 3, 4, 7 }    ..11..1
  5:      { 2, 4, 7 }    .1.1..1
  6:      { 1, 4, 7 }    1..1..1
  7:      { 4, 5, 7 }    ...11.1
  8:      { 3, 5, 7 }    ..1.1.1
  9:      { 2, 5, 7 }    .1..1.1
 10:      { 1, 5, 7 }    1...1.1
 11:      { 5, 6, 7 }    ....111
 12:      { 4, 6, 7 }    ...1.11
 13:      { 3, 6, 7 }    ..1..11
 14:      { 2, 6, 7 }    .1...11
 15:      { 1, 6, 7 }    1....11
 16:      { 1, 2, 6 }    11...1.
 17:      { 2, 3, 6 }    .11..1.
 18:      { 1, 3, 6 }    1.1..1.
 19:      { 3, 4, 6 }    ..11.1.
 20:      { 2, 4, 6 }    .1.1.1.
 21:      { 1, 4, 6 }    1..1.1.
 22:      { 4, 5, 6 }    ...111.
 23:      { 3, 5, 6 }    ..1.11.
 24:      { 2, 5, 6 }    .1..11.
 25:      { 1, 5, 6 }    1...11.
 26:      { 1, 2, 5 }    11..1..
 27:      { 2, 3, 5 }    .11.1..
 28:      { 1, 3, 5 }    1.1.1..
 29:      { 3, 4, 5 }    ..111..
 30:      { 2, 4, 5 }    .1.11..
 31:      { 1, 4, 5 }    1..11..
 32:      { 1, 2, 4 }    11.1...
 33:      { 2, 3, 4 }    .111...
 34:      { 1, 3, 4 }    1.11...
 35:      { 1, 2, 3 }    111....
ct=35
