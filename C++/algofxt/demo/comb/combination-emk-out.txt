// output of ./demo/comb/combination-emk-demo.cc:
// Description:
//% Combinations in strong minimal-change order (Eades-McKay sequence).
//% Iterative generation via modulo moves.

arg 1: 7 == n  [Combinations (n choose k)]  default=7
arg 2: 3 == k  [k elements at a time]  default=3
  1:    { 0, 1, 2 }  0    111....
  2:    { 0, 1, 3 }  2    11.1...
  3:    { 0, 1, 4 }  2    11..1..
  4:    { 0, 1, 5 }  2    11...1.
  5:    { 0, 1, 6 }  2    11....1
  6:    { 0, 5, 6 }  1    1....11
  7:    { 0, 4, 6 }  1    1...1.1
  8:    { 0, 4, 5 }  2    1...11.
  9:    { 0, 3, 5 }  1    1..1.1.
 10:    { 0, 3, 6 }  2    1..1..1
 11:    { 0, 3, 4 }  2    1..11..
 12:    { 0, 2, 4 }  1    1.1.1..
 13:    { 0, 2, 5 }  2    1.1..1.
 14:    { 0, 2, 6 }  2    1.1...1
 15:    { 0, 2, 3 }  2    1.11...
 16:    { 1, 2, 3 }  0    .111...
 17:    { 1, 2, 4 }  2    .11.1..
 18:    { 1, 2, 5 }  2    .11..1.
 19:    { 1, 2, 6 }  2    .11...1
 20:    { 1, 5, 6 }  1    .1...11
 21:    { 1, 4, 6 }  1    .1..1.1
 22:    { 1, 4, 5 }  2    .1..11.
 23:    { 1, 3, 5 }  1    .1.1.1.
 24:    { 1, 3, 6 }  2    .1.1..1
 25:    { 1, 3, 4 }  2    .1.11..
 26:    { 2, 3, 4 }  0    ..111..
 27:    { 2, 3, 5 }  2    ..11.1.
 28:    { 2, 3, 6 }  2    ..11..1
 29:    { 2, 5, 6 }  1    ..1..11
 30:    { 2, 4, 6 }  1    ..1.1.1
 31:    { 2, 4, 5 }  2    ..1.11.
 32:    { 3, 4, 5 }  0    ...111.
 33:    { 3, 4, 6 }  2    ...11.1
 34:    { 3, 5, 6 }  1    ...1.11
 35:    { 4, 5, 6 }  0    ....111
 ct = 35
