// output of ./demo/comb/perm-st-demo.cc:
// Description:
//% Single track ordering for permutations, CAT algorithm.

arg 1: 4 == n  [Number of elements to permute]  default=4
arg 2: 0 == iq  [Whether first permutation is the identical permutation]  default=0
   0:    [ . 2 3 1 ]    [ . 3 1 2 ]    [ . . . ]
   1:    [ . 3 2 1 ]    [ . 3 2 1 ]    [ 1 . . ]    0: (2,3) 
   2:    [ . 3 1 2 ]    [ . 2 3 1 ]    [ . 1 . ]    1: (1,2) 
   3:    [ . 2 1 3 ]    [ . 2 1 3 ]    [ 1 1 . ]    0: (2,3) 
   4:    [ . 1 2 3 ]    [ . 1 2 3 ]    [ . 2 . ]    1: (1,2) 
   5:    [ . 1 3 2 ]    [ . 1 3 2 ]    [ 1 2 . ]    0: (2,3) 
   6:    [ 1 . 2 3 ]    [ 1 . 2 3 ]    [ . . 1 ]    2: (0,1) (2,3) 
   7:    [ 1 . 3 2 ]    [ 1 . 3 2 ]    [ 1 . 1 ]    0: (2,3) 
   8:    [ 2 . 3 1 ]    [ 1 3 . 2 ]    [ . 1 1 ]    1: (1,2) 
   9:    [ 3 . 2 1 ]    [ 1 3 2 . ]    [ 1 1 1 ]    0: (2,3) 
  10:    [ 3 . 1 2 ]    [ 1 2 3 . ]    [ . 2 1 ]    1: (1,2) 
  11:    [ 2 . 1 3 ]    [ 1 2 . 3 ]    [ 1 2 1 ]    0: (2,3) 
  12:    [ 3 1 . 2 ]    [ 2 1 3 . ]    [ . . 2 ]    2: (0,1) (2,3) 
  13:    [ 2 1 . 3 ]    [ 2 1 . 3 ]    [ 1 . 2 ]    0: (2,3) 
  14:    [ 1 2 . 3 ]    [ 2 . 1 3 ]    [ . 1 2 ]    1: (1,2) 
  15:    [ 1 3 . 2 ]    [ 2 . 3 1 ]    [ 1 1 2 ]    0: (2,3) 
  16:    [ 2 3 . 1 ]    [ 2 3 . 1 ]    [ . 2 2 ]    1: (1,2) 
  17:    [ 3 2 . 1 ]    [ 2 3 1 . ]    [ 1 2 2 ]    0: (2,3) 
  18:    [ 2 3 1 . ]    [ 3 2 . 1 ]    [ . . 3 ]    2: (0,1) (2,3) 
  19:    [ 3 2 1 . ]    [ 3 2 1 . ]    [ 1 . 3 ]    0: (2,3) 
  20:    [ 3 1 2 . ]    [ 3 1 2 . ]    [ . 1 3 ]    1: (1,2) 
  21:    [ 2 1 3 . ]    [ 3 1 . 2 ]    [ 1 1 3 ]    0: (2,3) 
  22:    [ 1 2 3 . ]    [ 3 . 1 2 ]    [ . 2 3 ]    1: (1,2) 
  23:    [ 1 3 2 . ]    [ 3 . 2 1 ]    [ 1 2 3 ]    0: (2,3) 
 ct=24
