// output of ./demo/comb/combination-lex-demo.cc:
// Description:
//% Generating all combinations in lexicographic order.

arg 1: 7 == n  [Combinations (n choose k) in lexicographic order:  n>0]  default=7
arg 2: 4 == k  [ 0 < k <= n]  default=4
arg 3: 0 == rq  [Whether to reverse order]  default=0
   1:    { 0, 1, 2, 3 }  0      1111...
   2:    { 0, 1, 2, 4 }  3      111.1..
   3:    { 0, 1, 2, 5 }  3      111..1.
   4:    { 0, 1, 2, 6 }  3      111...1
   5:    { 0, 1, 3, 4 }  2      11.11..
   6:    { 0, 1, 3, 5 }  3      11.1.1.
   7:    { 0, 1, 3, 6 }  3      11.1..1
   8:    { 0, 1, 4, 5 }  2      11..11.
   9:    { 0, 1, 4, 6 }  3      11..1.1
  10:    { 0, 1, 5, 6 }  2      11...11
  11:    { 0, 2, 3, 4 }  1      1.111..
  12:    { 0, 2, 3, 5 }  3      1.11.1.
  13:    { 0, 2, 3, 6 }  3      1.11..1
  14:    { 0, 2, 4, 5 }  2      1.1.11.
  15:    { 0, 2, 4, 6 }  3      1.1.1.1
  16:    { 0, 2, 5, 6 }  2      1.1..11
  17:    { 0, 3, 4, 5 }  1      1..111.
  18:    { 0, 3, 4, 6 }  3      1..11.1
  19:    { 0, 3, 5, 6 }  2      1..1.11
  20:    { 0, 4, 5, 6 }  1      1...111
  21:    { 1, 2, 3, 4 }  0      .1111..
  22:    { 1, 2, 3, 5 }  3      .111.1.
  23:    { 1, 2, 3, 6 }  3      .111..1
  24:    { 1, 2, 4, 5 }  2      .11.11.
  25:    { 1, 2, 4, 6 }  3      .11.1.1
  26:    { 1, 2, 5, 6 }  2      .11..11
  27:    { 1, 3, 4, 5 }  1      .1.111.
  28:    { 1, 3, 4, 6 }  3      .1.11.1
  29:    { 1, 3, 5, 6 }  2      .1.1.11
  30:    { 1, 4, 5, 6 }  1      .1..111
  31:    { 2, 3, 4, 5 }  0      ..1111.
  32:    { 2, 3, 4, 6 }  3      ..111.1
  33:    { 2, 3, 5, 6 }  2      ..11.11
  34:    { 2, 4, 5, 6 }  1      ..1.111
  35:    { 3, 4, 5, 6 }  0      ...1111

 ct = 35
