// output of ./demo/comb/perm-lex-cycles-demo.cc:
// Description:
//% Generate all permutations in lexicographic order, show cycles and inversion tables.

arg 1: 4 == n  [Permutations of n elements.]  default=4
   0:    [ . 1 2 3 ]    (0) (1) (2) (3)   [ . . . ]   0
   1:    [ . 1 3 2 ]    (0) (1) (2, 3)    [ . . 1 ]   1
   2:    [ . 2 1 3 ]    (0) (1, 2) (3)    [ . 1 . ]   1
   3:    [ . 2 3 1 ]    (0) (1, 2, 3)     [ . 1 1 ]   2
   4:    [ . 3 1 2 ]    (0) (1, 3, 2)     [ . 2 . ]   2
   5:    [ . 3 2 1 ]    (0) (1, 3) (2)    [ . 2 1 ]   3
   6:    [ 1 . 2 3 ]    (0, 1) (2) (3)    [ 1 . . ]   1
   7:    [ 1 . 3 2 ]    (0, 1) (2, 3)     [ 1 . 1 ]   2
   8:    [ 1 2 . 3 ]    (0, 1, 2) (3)     [ 1 1 . ]   2
   9:    [ 1 2 3 . ]    (0, 1, 2, 3)      [ 1 1 1 ]   3
  10:    [ 1 3 . 2 ]    (0, 1, 3, 2)      [ 1 2 . ]   3
  11:    [ 1 3 2 . ]    (0, 1, 3) (2)     [ 1 2 1 ]   4
  12:    [ 2 . 1 3 ]    (0, 2, 1) (3)     [ 2 . . ]   2
  13:    [ 2 . 3 1 ]    (0, 2, 3, 1)      [ 2 . 1 ]   3
  14:    [ 2 1 . 3 ]    (0, 2) (1) (3)    [ 2 1 . ]   3
  15:    [ 2 1 3 . ]    (0, 2, 3) (1)     [ 2 1 1 ]   4
  16:    [ 2 3 . 1 ]    (0, 2) (1, 3)     [ 2 2 . ]   4
  17:    [ 2 3 1 . ]    (0, 2, 1, 3)      [ 2 2 1 ]   5
  18:    [ 3 . 1 2 ]    (0, 3, 2, 1)      [ 3 . . ]   3
  19:    [ 3 . 2 1 ]    (0, 3, 1) (2)     [ 3 . 1 ]   4
  20:    [ 3 1 . 2 ]    (0, 3, 2) (1)     [ 3 1 . ]   4
  21:    [ 3 1 2 . ]    (0, 3) (1) (2)    [ 3 1 1 ]   5
  22:    [ 3 2 . 1 ]    (0, 3, 1, 2)      [ 3 2 . ]   5
  23:    [ 3 2 1 . ]    (0, 3) (1, 2)     [ 3 2 1 ]   6
