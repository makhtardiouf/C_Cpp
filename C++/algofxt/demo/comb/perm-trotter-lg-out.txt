// output of ./demo/comb/perm-trotter-lg-demo.cc:
// Description:
//% Generate all permutations in strong minimal-change order using Trotter's algorithm.
//% Largest element moves most often.

arg 1: 4 == n  [Permutations of n elements.]  default=4
arg 2: 0 == bq  [Whether to go backwards.]  default=0
   0:    [ . 1 2 3 ]    (0, 1)     [ . 1 2 3 ]     - - - -
   1:    [ . 1 3 2 ]    (3, 2)     [ . 1 3 2 ]     - - - -
   2:    [ . 3 1 2 ]    (2, 1)     [ . 2 3 1 ]     - - - -
   3:    [ 3 . 1 2 ]    (1, 0)     [ 1 2 3 . ]     - - - -
   4:    [ 3 . 2 1 ]    (3, 2)     [ 1 3 2 . ]     - - - +
   5:    [ . 3 2 1 ]    (0, 1)     [ . 3 2 1 ]     - - - +
   6:    [ . 2 3 1 ]    (1, 2)     [ . 3 1 2 ]     - - - +
   7:    [ . 2 1 3 ]    (2, 3)     [ . 2 1 3 ]     - - - +
   8:    [ 2 . 1 3 ]    (1, 0)     [ 1 2 . 3 ]     - - - -
   9:    [ 2 . 3 1 ]    (3, 2)     [ 1 3 . 2 ]     - - - -
  10:    [ 2 3 . 1 ]    (2, 1)     [ 2 3 . 1 ]     - - - -
  11:    [ 3 2 . 1 ]    (1, 0)     [ 2 3 1 . ]     - - - -
  12:    [ 3 2 1 . ]    (3, 2)     [ 3 2 1 . ]     - - + +
  13:    [ 2 3 1 . ]    (0, 1)     [ 3 2 . 1 ]     - - + +
  14:    [ 2 1 3 . ]    (1, 2)     [ 3 1 . 2 ]     - - + +
  15:    [ 2 1 . 3 ]    (2, 3)     [ 2 1 . 3 ]     - - + +
  16:    [ 1 2 . 3 ]    (0, 1)     [ 2 . 1 3 ]     - - + -
  17:    [ 1 2 3 . ]    (3, 2)     [ 3 . 1 2 ]     - - + -
  18:    [ 1 3 2 . ]    (2, 1)     [ 3 . 2 1 ]     - - + -
  19:    [ 3 1 2 . ]    (1, 0)     [ 3 1 2 . ]     - - + -
  20:    [ 3 1 . 2 ]    (2, 3)     [ 2 1 3 . ]     - - + +
  21:    [ 1 3 . 2 ]    (0, 1)     [ 2 . 3 1 ]     - - + +
  22:    [ 1 . 3 2 ]    (1, 2)     [ 1 . 3 2 ]     - - + +
  23:    [ 1 . 2 3 ]    (2, 3)     [ 1 . 2 3 ]     - - + +
 ct=24
