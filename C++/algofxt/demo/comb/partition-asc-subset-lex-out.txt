// output of ./demo/comb/partition-asc-subset-lex-demo.cc:
// Description:
//% Partitions of n into positive parts as ascending list of parts.
//% Subset-lex order.
//% Loopless algorithm.
//% See Joerg Arndt, Subset-lex: did we miss an order?, (2014)
//%   http://arxiv.org/abs/1405.6503

arg 1: 11 == n  [partitions of n]  default=11
arg 2: 0 == aa  [Whether to render as ASCII art]  default=0
   0:  [ 1]  [ 11 ]
   1:  [ 2]  [ 1 10 ]
   2:  [ 3]  [ 1 1 9 ]
   3:  [ 4]  [ 1 1 1 8 ]
   4:  [ 5]  [ 1 1 1 1 7 ]
   5:  [ 6]  [ 1 1 1 1 1 6 ]
   6:  [ 7]  [ 1 1 1 1 1 1 5 ]
   7:  [ 8]  [ 1 1 1 1 1 1 1 4 ]
   8:  [ 9]  [ 1 1 1 1 1 1 1 1 3 ]
   9:  [10]  [ 1 1 1 1 1 1 1 1 1 2 ]
  10:  [11]  [ 1 1 1 1 1 1 1 1 1 1 1 ]
  11:  [ 9]  [ 1 1 1 1 1 1 1 2 2 ]
  12:  [ 8]  [ 1 1 1 1 1 1 2 3 ]
  13:  [ 7]  [ 1 1 1 1 1 2 4 ]
  14:  [ 8]  [ 1 1 1 1 1 2 2 2 ]
  15:  [ 7]  [ 1 1 1 1 1 3 3 ]
  16:  [ 6]  [ 1 1 1 1 2 5 ]
  17:  [ 7]  [ 1 1 1 1 2 2 3 ]
  18:  [ 6]  [ 1 1 1 1 3 4 ]
  19:  [ 5]  [ 1 1 1 2 6 ]
  20:  [ 6]  [ 1 1 1 2 2 4 ]
  21:  [ 7]  [ 1 1 1 2 2 2 2 ]
  22:  [ 6]  [ 1 1 1 2 3 3 ]
  23:  [ 5]  [ 1 1 1 3 5 ]
  24:  [ 5]  [ 1 1 1 4 4 ]
  25:  [ 4]  [ 1 1 2 7 ]
  26:  [ 5]  [ 1 1 2 2 5 ]
  27:  [ 6]  [ 1 1 2 2 2 3 ]
  28:  [ 5]  [ 1 1 2 3 4 ]
  29:  [ 4]  [ 1 1 3 6 ]
  30:  [ 5]  [ 1 1 3 3 3 ]
  31:  [ 4]  [ 1 1 4 5 ]
  32:  [ 3]  [ 1 2 8 ]
  33:  [ 4]  [ 1 2 2 6 ]
  34:  [ 5]  [ 1 2 2 2 4 ]
  35:  [ 6]  [ 1 2 2 2 2 2 ]
  36:  [ 5]  [ 1 2 2 3 3 ]
  37:  [ 4]  [ 1 2 3 5 ]
  38:  [ 4]  [ 1 2 4 4 ]
  39:  [ 3]  [ 1 3 7 ]
  40:  [ 4]  [ 1 3 3 4 ]
  41:  [ 3]  [ 1 4 6 ]
  42:  [ 3]  [ 1 5 5 ]
  43:  [ 2]  [ 2 9 ]
  44:  [ 3]  [ 2 2 7 ]
  45:  [ 4]  [ 2 2 2 5 ]
  46:  [ 5]  [ 2 2 2 2 3 ]
  47:  [ 4]  [ 2 2 3 4 ]
  48:  [ 3]  [ 2 3 6 ]
  49:  [ 4]  [ 2 3 3 3 ]
  50:  [ 3]  [ 2 4 5 ]
  51:  [ 2]  [ 3 8 ]
  52:  [ 3]  [ 3 3 5 ]
  53:  [ 3]  [ 3 4 4 ]
  54:  [ 2]  [ 4 7 ]
  55:  [ 2]  [ 5 6 ]
 ct=56
