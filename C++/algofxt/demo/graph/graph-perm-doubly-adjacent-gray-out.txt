// output of ./demo/graph/graph-perm-doubly-adjacent-gray-demo.cc:
// Description:
//% Gray codes through permutations with only adjacent interchanges and
//% successive transpositions overlapping (doubly-adjacent Gray codes).

arg 1: 4 == N  [Number of elements in permutations]  default=4
arg 2: 1 == jcyc  [Whether only cycles are output]  default=1
arg 3: 1 == maxnp  [stop after maxnp paths (0: never stop)]  default=1
arg 4: 0 == rnds  [if set, edge order is randomized and rnds is used as random seed]  default=0
Graph has 24 nodes, 72 edges.
Path #0:
   0:      0 == [ . 1 2 3 ]    ....       [ . 1 2 3 ]    ....       [ . . . ]   [ . . . ]
   1:      1 == [ 1 . 2 3 ]    11..       [ 1 . 2 3 ]    11..       [ 1 . . ]   [ 1 . . ]
   2:      4 == [ 1 2 . 3 ]    .11.       [ 2 . 1 3 ]    1.1.       [ 2 . . ]   [ 1 1 . ]
   3:      5 == [ 2 1 . 3 ]    11..       [ 2 1 . 3 ]    .11.       [ 2 1 . ]   [ 1 2 . ]
   4:      3 == [ 2 . 1 3 ]    .11.       [ 1 2 . 3 ]    11..       [ 1 1 . ]   [ . 2 . ]
   5:     13 == [ 2 . 3 1 ]    ..11       [ 1 3 . 2 ]    .1.1       [ 1 2 . ]   [ . 2 1 ]
   6:     16 == [ 2 3 . 1 ]    .11.       [ 2 3 . 1 ]    1..1       [ 2 2 . ]   [ . 2 2 ]
   7:     17 == [ 3 2 . 1 ]    11..       [ 2 3 1 . ]    ..11       [ 2 2 1 ]   [ . 2 3 ]
   8:     15 == [ 3 . 2 1 ]    .11.       [ 1 3 2 . ]    1.1.       [ 1 2 1 ]   [ . 1 3 ]
   9:      9 == [ 3 . 1 2 ]    ..11       [ 1 2 3 . ]    .11.       [ 1 1 1 ]   [ . . 3 ]
  10:     11 == [ 3 1 . 2 ]    .11.       [ 2 1 3 . ]    11..       [ 2 1 1 ]   [ 1 . 3 ]
  11:     21 == [ 3 1 2 . ]    ..11       [ 3 1 2 . ]    1.1.       [ 3 1 1 ]   [ 1 1 3 ]
  12:     23 == [ 3 2 1 . ]    .11.       [ 3 2 1 . ]    .11.       [ 3 2 1 ]   [ 1 2 3 ]
  13:     22 == [ 2 3 1 . ]    11..       [ 3 2 . 1 ]    ..11       [ 3 2 . ]   [ 1 2 2 ]
  14:     19 == [ 2 1 3 . ]    .11.       [ 3 1 . 2 ]    .1.1       [ 3 1 . ]   [ 1 2 1 ]
  15:     18 == [ 1 2 3 . ]    11..       [ 3 . 1 2 ]    .11.       [ 3 . . ]   [ 1 1 1 ]
  16:     20 == [ 1 3 2 . ]    .11.       [ 3 . 2 1 ]    ..11       [ 3 . 1 ]   [ 1 1 2 ]
  17:     10 == [ 1 3 . 2 ]    ..11       [ 2 . 3 1 ]    1.1.       [ 2 . 1 ]   [ 1 . 2 ]
  18:      7 == [ 1 . 3 2 ]    .11.       [ 1 . 3 2 ]    1..1       [ 1 . 1 ]   [ 1 . 1 ]
  19:      6 == [ . 1 3 2 ]    11..       [ . 1 3 2 ]    11..       [ . . 1 ]   [ . . 1 ]
  20:      8 == [ . 3 1 2 ]    .11.       [ . 2 3 1 ]    .1.1       [ . 1 1 ]   [ . . 2 ]
  21:     14 == [ . 3 2 1 ]    ..11       [ . 3 2 1 ]    .11.       [ . 2 1 ]   [ . 1 2 ]
  22:     12 == [ . 2 3 1 ]    .11.       [ . 3 1 2 ]    ..11       [ . 2 . ]   [ . 1 1 ]
  23:      2 == [ . 2 1 3 ]    ..11       [ . 2 1 3 ]    .1.1       [ . 1 . ]   [ . 1 . ]

 % N=4  npt=1
