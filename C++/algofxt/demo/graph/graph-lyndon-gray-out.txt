// output of ./demo/graph/graph-lyndon-gray-demo.cc:
// Description:
//% Paths through a directed graph: Gray paths through Lyndon words.

arg 1: 7 == n  [a prime <=23]  default=7
arg 2: 1 == maxnp  [stop after maxnp paths (0: never stop)]  default=1
arg 3: 0 == cn  [choose comparison function for sorting edges]  default=0
arg 4: 0 == erevq  [whether to reverse edge-order]  default=0
arg 5: 0 == condn  [choose condition: 0==>cycles, 1==>rot0, 2==>monotonic, 3==>1&2, 4==>nil]  default=0
Using comparison function #0
  #nodes=18  #edges=94
   0:  
    k :  [ node]  lyn_dec lyn_bin #rot rot(lyn)     diff  delta
    0 :  [    0]        1  ......1  0   ......1   ......1  0
    1 :  [    1]        3  .....11  0   .....11   .....1.  1
    2 :  [    3]        7  ....111  0   ....111   ....1..  2
    3 :  [    7]       15  ...1111  0   ...1111   ...1...  3
    4 :  [   13]       31  ..11111  0   ..11111   ..1....  4
    5 :  [   17]       63  .111111  0   .111111   .1.....  5
    6 :  [   15]       47  .1.1111  0   .1.1111   ..1....  4
    7 :  [   10]       23  ..1.111  1   .1.111.   ......1  0
    8 :  [   16]       55  .11.111  1   11.111.   1......  6
    9 :  [   11]       27  ..11.11  2   11.11..   .....1.  1
   10 :  [    5]       11  ...1.11  2   .1.11..   1......  6
   11 :  [   14]       43  .1.1.11  2   .1.11.1   ......1  0
   12 :  [    6]       13  ...11.1  0   ...11.1   .1.....  5
   13 :  [   12]       29  ..111.1  0   ..111.1   ..1....  4
   14 :  [    8]       19  ..1..11  3   ..11..1   ....1..  2
   15 :  [    4]        9  ...1..1  0   ...1..1   ..1....  4
   16 :  [    9]       21  ..1.1.1  3   .1.1..1   .1.....  5
   17 :  [    2]        5  ....1.1  3   .1.1...   ......1  0

Path: (short print) 
Path: #non-first-free turns = 0  (lucky path)

n = 7   #pfct = 1
   #paths = 1   #cycles = 1
