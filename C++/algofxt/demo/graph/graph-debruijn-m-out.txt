// output of ./demo/graph/graph-debruijn-m-demo.cc:
// Description:
//% Find all paths through the m-ary De Bruijn graph.

arg 1: 3 == m  [m-ary De Bruijn graph]  default=3
arg 2: 3 == n  [size of graph == m*n]  default=3
arg 3: 5 == pq  [what to print with each path:
  0==> nothing (just count)
  1==> lowest bits (De Bruijn sequence)
  2==> path
  3==> De Bruijn sequence and path 
]  default=5
arg 4: 0 == maxnp  [stop after maxnp paths (0: never stop)]  default=0
arg 5: 0 == p0  [start position <m*n]  default=0
Graph =
  Node:  0  1  2  3  4  5  6  7  8
Edge 0:  0  3  6  0  3  6  0  3  6
Edge 1:  1  4  7  1  4  7  1  4  7
Edge 2:  2  5  8  2  5  8  2  5  8
Path(s):
   1:  010211220     0  1  3  2  7  4  5  8  6 
   2:  010221120     0  1  3  2  8  7  4  5  6 
   3:  011021220     0  1  4  3  2  7  5  8  6 
   4:  011022120     0  1  4  3  2  8  7  5  6 
   5:  011202210     0  1  4  5  6  2  8  7  3 
   6:  011210220     0  1  4  5  7  3  2  8  6 
   7:  011220210     0  1  4  5  8  6  2  7  3 
   8:  011221020     0  1  4  5  8  7  3  2  6 
   9:  012022110     0  1  5  6  2  8  7  4  3 
  10:  012110220     0  1  5  7  4  3  2  8  6 
  11:  012202110     0  1  5  8  6  2  7  4  3 
  12:  012211020     0  1  5  8  7  4  3  2  6 
  13:  020112210     0  2  6  1  4  5  8  7  3 
  14:  020122110     0  2  6  1  5  8  7  4  3 
  15:  021011220     0  2  7  3  1  4  5  8  6 
  16:  021101220     0  2  7  4  3  1  5  8  6 
  17:  021122010     0  2  7  4  5  8  6  1  3 
  18:  021220110     0  2  7  5  8  6  1  4  3 
  19:  022011210     0  2  8  6  1  4  5  7  3 
  20:  022012110     0  2  8  6  1  5  7  4  3 
  21:  022101120     0  2  8  7  3  1  4  5  6 
  22:  022110120     0  2  8  7  4  3  1  5  6 
  23:  022112010     0  2  8  7  4  5  6  1  3 
  24:  022120110     0  2  8  7  5  6  1  4  3 
n = 3 (ng=9)   #cycles = 24
